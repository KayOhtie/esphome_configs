font:
#   - file: "gfonts://Share+Tech+Mono"
  - file: "./fonts/BebasNeue-Regular.ttf"
    id: font_time
    size: 40
#   - file: "gfonts://VT323"
  - file: "./fonts/BebasNeue-Regular.ttf"
    id: font_smaller
    size: 20
    extras:
    - file: "gfonts://Material+Symbols+Outlined"
      glyphs: [
        "\ue425", # timer
        "\ue7f4", # notifications
        "\ue855", # alarm clock
        "\ue029", # microphone
        "\uf5d1", # multiple microphones
        "\uf540", # calendar
        # "\uef44", # bedtime
        "\uf7ed", # backlight-high
        "\ue405", # musical note
        # Weather
        "\uef44", # clear-night, bedtime
        "\ue2bd", # cloudy
        "\uf3cc", # exceptional
        "\ue818", # fog
        "\uf67f", # hail
        "\uea0b", # lightning
        "\uebdb", # lightning-rainy
        "\uf172", # partlycloudy
        "\uf61f", # pouring
        "\uf61e", # rainy
        "\ue80f", # snowy
        "\uf61d", # snowy-rainy
        "\ue81a", # sunny
        "\uefd8", # windy
        "\ue29c", # windy-variant
      ]
time:
  - platform: homeassistant
    id: the_time
  # - platform: sntp
  #   id: the_time
  #   timezone: America/Chicago
  #   servers:
  #     - "10.2.1.1"

i2c:
  - id: !extend grove_i2c
    frequency: 800kHz

text_sensor:
  - platform: homeassistant
    id: the_sun
    entity_id: sun.sun
    on_value: 
      then:
        - script.execute: update_brightness
  - platform: homeassistant
    id: weather_condition
    entity_id: ${weather_entity}

switch:
  - platform: template
    id: show_weather
    name: Show Weather
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true

sensor:
  - platform: homeassistant
    id: weather_temp
    entity_id: ${weather_entity}
    attribute: temperature

interval:
  - interval: 5s
    then:
      - if:
          condition:
            - lambda: return !id(va).get_timers().empty();
          then:
            - display.page.show_next: the_display

binary_sensor:
  - platform: homeassistant
    entity_id: ${light_group_entity}
    id: lights_state
    on_state: 
      then:
        - script.execute: update_brightness

number:
  - platform: template
    id: brightness_night
    name: Night Brightness
    entity_category: config
    min_value: 0
    max_value: 100
    step: 10
    optimistic: true
    restore_value: true
    on_value: 
      then:
        - script.execute: update_brightness

script:
  - id: update_brightness
    then:
      - if:
          condition:
            or:
              - binary_sensor.is_on: lights_state
              - text_sensor.state: 
                  id: the_sun
                  state: "above_horizon"
          then:
            - lambda: |-
                id(the_display).set_contrast(1.0);
          else:
            - lambda: |-
                id(the_display).set_contrast(float(id(brightness_night).state)/100.0);

mapping:
  - id: weather_icon_map
    from: string
    to: string
    entries:
      clear-night: "\uef44"
      cloudy: "\ue2bd"
      exceptional: "\uf3cc"
      fog: "\ue818"
      hail: "\uf67f"
      lightning: "\uea0b"
      lightning-rainy: "\uebdb"
      partlycloudy: "\uf172"
      pouring: "\uf61f"
      rainy: "\uf61e"
      snowy: "\ue80f"
      snowy-rainy: "\uf61d"
      sunny: "\ue81a"
      windy: "\uefd8"
      windy-variant: "\ue29c"