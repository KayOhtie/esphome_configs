substitutions:
  friendly_name: Soundbar IR
esphome:
  name: soundbar-ir
  # platform: ESP32
# esp32:
#   board: adafruit_qtpy_esp32s2

esp32:
  board: m5stack-atom

packages:
  common: !include base/common.template.yaml

event: 
  - platform: template
    name: "Vizio Button"
    id: vizio_button
    event_types:
      - Next
      - Previous
      - Play/Pause
      - VZTV On
      - VZTV Off
    on_event:
      then:
        - lambda: |-
            ESP_LOGI("main", "Event %s triggered.", event_type.c_str());
remote_transmitter:
  - id: external_ir
    pin: GPIO32
    carrier_duty_percent: 50%
  - id: internal_ir
    pin: GPIO12
    carrier_duty_percent: 50%

globals:
  - id: vizio_first
    type: int
    restore_value: no
    initial_value: '0'

mapping:
  - id: vizio_map
    from: int
    to: string
    entries:
      0x748B: Next
      0x758A: Previous
      0x718E: Play/Pause
      0xE11E: VZTV On
      0xE01F: VZTV Off
  - id: roku_map
    from: int
    to: string
    entries:
      0xE619: Up
      0xCC33: Down
      0xE11E: Left
      0xD22D: Right


remote_receiver:
  pin: 
    number: GPIO26
    inverted: True
  dump: nec
  on_nec:
    then:
      lambda: |-
      switch (x.address)
        // Vizio Soundbar Remote
        case 0xFF00:
          switch (x.command) {
            case 0x748B:
            case 0x758A:
            case 0x718E:
            case 0xE11E:
            case 0xE01F:
              id(vizio_button).trigger(id(vizio_map)[x.command]);
              break;
            default:
              ESP_LOGI("main", "Received command %d", x.command);
              break;
          }
          break;
        // Roku TV Remote
        case 0xC7EA:
          if 
          switch (x.command) {

          }

script:
  - id: send_code
    parameters:
      code: int
    then:
      - remote_transmitter.transmit_nec:
          transmitter_id: external_ir
          address: 0xFF00
          command: !lambda return ((0xFF - code) << 8) + code;

button:
  - platform: template
    name: "Power"
    on_press: 
     - lambda: id(send_code)->execute(0x40);
  - platform: template
    name: "Vol+"
    on_press: 
     - lambda: id(send_code)->execute(0x41);
  - platform: template
    name: "Vol-"
    on_press: 
     - lambda: id(send_code)->execute(0x45);
  - platform: template
    name: "Mute"
    on_press: 
     - lambda: id(send_code)->execute(0x48);

select:
  - platform: template
    name: "Source"
    id: sel_source
    options:
      - Optical
      - HDMI-ARC
      - Bluetooth
      - Aux
      - Aux VA
    optimistic: true
    on_value: 
      then:
        - lambda: |- 
            int sources_map[5] {0xC8,0x9A,0x22,0xB1,0xB2};
            id(send_code)->execute(sources_map[i]);
  - platform: template
    name: "EQ Mode"
    id: sel_eq
    options:
      - Direct
      - Movie
      - Music
      - Game
    optimistic: true
    on_value: 
      then:
        - lambda: |- 
            int eq_map[4] {0x8C,0x67,0x66,0xE1};
            id(send_code)->execute(eq_map[i]);

switch:
  - platform: template
    name: "Night Mode"
    optimistic: true
    turn_on_action:
     - lambda: id(send_code)->execute(0x61);
    turn_off_action:
     - lambda: id(send_code)->execute(0x62);
    